@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PositionWithFunction</title>
    <link rel="stylesheet" href="~/Content/layui/css/layui.css">
</head>
<body>
    <div>
        <form class="layui-form" action="">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">职位</label>
                    <div class="layui-input-inline">
                        <select name="interest" lay-filter="positions" id="select_position">
                            <option value="0"></option>
                        </select>
                    </div>
                </div>
                <button class="layui-btn layui-btn-normal" type="reset">重置为空</button>
                <button class="layui-btn layui-btn-normal" type="submit" lay-submit lay-filter="LAY-auth-tree-submit">保存当前修改</button>

                <div class="layui-form-item" style="height:700px;">
                    <label class="layui-form-label">选择权限</label>
                    <div class="layui-input-block">
                        <div id="LAY-auth-tree-convert-index"></div>
                    </div>
                </div>

            </div>
        </form>


        <script src="~/Script/jquery.min.js"></script>
        <script src="~/Content/layui/layui.js"></script>
        <script type="text/javascript">
            layui.config({
                base: '../../../Content/layui/tree/',
            }).extend({
                authtree: 'authtree',
            });
            layui.use(['jquery', 'authtree', 'form', 'layer', 'code'], function () {
                var $ = layui.jquery;
                var authtree = layui.authtree;
                var form = layui.form;
                var layer = layui.layer;
                // 初始化
                $.ajax({
                    //url: '../../../Content/layui/tree/list-2.json',
                    url: 'GetFunctionTree',
                    dataType: 'json',
                    success: function (res) {
                        // 渲染时传入渲染目标ID，树形结构数据（具体结构看样例，checked表示默认选中），以及input表单的名字
                        var trees = authtree.listConvert(res.data.list, {
                            primaryKey: 'id'
                            , startPid: 0
                            , parentKey: 'pid'
                            , nameKey: 'name'
                            , valueKey: 'id'
                        });
                        layui.code({
                        });
                        // 如果页面中多个树共存，需要注意 layfilter 需要不一样
                        authtree.render('#LAY-auth-tree-convert-index', trees, {
                            inputname: 'authids[]',
                            layfilter: 'lay-check-convert-auth',
                            openall: true,
                            autowidth: true,
                        });

                        // PS:使用 form.on() 会引起了事件冒泡延迟的BUG，需要 setTimeout()，并且无法监听全选/全不选
                        // PS:如果开启双击展开配置，form.on()会记录两次点击事件，authtree.on()不会
                        /*			form.on('checkbox(lay-check-auth)', function(data){
                                        // 注意这里：需要等待事件冒泡完成，不然获取叶子节点不准确。
                                        setTimeout(function(){
                                            console.log('监听 form 触发事件数据', data);
                                            // 获取选中的叶子节点
                                            var leaf = authtree.getLeaf('#LAY-auth-tree-index');
                                            console.log('leaf', leaf);
                                            // 获取最新选中
                                            var lastChecked = authtree.getLastChecked('#LAY-auth-tree-index');
                                            console.log('lastChecked', lastChecked);
                                            // 获取最新取消
                                            var lastNotChecked = authtree.getLastNotChecked('#LAY-auth-tree-index');
                                            console.log('lastNotChecked', lastNotChecked);
                                        }, 100);
                                    });
                        */			// 使用 authtree.on() 不会有冒泡延迟
                        authtree.on('change(lay-check-convert-auth)', function (data) {
                            console.log('监听 authtree 触发事件数据', data);
                            // 获取所有节点
                            var all = authtree.getAll('#LAY-auth-tree-convert-index');
                            // 获取所有已选中节点
                            var checked = authtree.getChecked('#LAY-auth-tree-convert-index');
                            // 获取所有未选中节点
                            var notchecked = authtree.getNotChecked('#LAY-auth-tree-convert-index');
                            // 获取选中的叶子节点
                            var leaf = authtree.getLeaf('#LAY-auth-tree-convert-index');
                            // 获取最新选中
                            var lastChecked = authtree.getLastChecked('#LAY-auth-tree-convert-index');
                            // 获取最新取消
                            var lastNotChecked = authtree.getLastNotChecked('#LAY-auth-tree-convert-index');
                            console.log(
                                'all', all, "\n",
                                'checked', checked, "\n",
                                'notchecked', notchecked, "\n",
                                'leaf', leaf, "\n",
                                'lastChecked', lastChecked, "\n",
                                'lastNotChecked', lastNotChecked, "\n"
                            );
                        });
                        authtree.on('deptChange(lay-check-convert-auth)', function (data) {
                            console.log('监听到显示层数改变', data);
                        });
                        authtree.on('dblclick(lay-check-convert-auth)', function (data) {
                            console.log('监听到双击事件', data);
                        });
                    },
                    error: function (xml, errstr, err) {
                        layer.alert(errstr + '，获取样例数据失败，请检查是否部署在本地服务器中！');
                    }
                });
                // 表单提交样例
                form.on('submit(LAY-auth-tree-submit)', function (obj) {
                    var authids = authtree.getChecked('#LAY-auth-tree-convert-index');
                    console.log('Choosed authids is', authids);
                    // obj.field.authids = authids;
                    $.ajax({
                        url: 'SaveFunctionTreeOnPostion',
                        //dataType: 'json',
                        data: { pos_id: $("#select_position").val(), fun_id: String(authids) },
                        success: function (res) {
                            if (res > 0) {
                                layer.alert('提交成功！');
                            } else {
                                layer.alert('提交失败！');
                            }
                        }
                    });
                    return false;
                });
                //监听select
                layui.form.on('select(positions)', function (data) {
                    //console.log(data.elem); //得到select原始DOM对象
                    console.log(data.value); //得到被选中的值
                    //console.log(data.othis); //得到美化后的DOM对象
                    $.ajax({
                        url: 'GetFunctionTreeByPostion',
                        dataType: 'json',
                        data: { pos_id: data.value },
                        success: function (res) {  //重载树
                            var trees = authtree.listConvert(res.data.list, {
                                primaryKey: 'id'
                                , startPid: 0
                                , parentKey: 'pid'
                                , nameKey: 'name'
                                , valueKey: 'id'
                                , checkedKey: res.data.checkedId
                            });
                            layui.code({
                            });
                            // 如果页面中多个树共存，需要注意 layfilter 需要不一样
                            authtree.render('#LAY-auth-tree-convert-index', trees, {
                                inputname: 'authids[]',
                                layfilter: 'lay-check-convert-auth',
                                openall: true,
                                autowidth: true,
                            });
                            authtree.on('change(lay-check-convert-auth)', function (data) {
                                console.log('监听 authtree 触发事件数据', data);
                                // 获取所有节点
                                var all = authtree.getAll('#LAY-auth-tree-convert-index');
                                // 获取所有已选中节点
                                var checked = authtree.getChecked('#LAY-auth-tree-convert-index');
                                // 获取所有未选中节点
                                var notchecked = authtree.getNotChecked('#LAY-auth-tree-convert-index');
                                // 获取选中的叶子节点
                                var leaf = authtree.getLeaf('#LAY-auth-tree-convert-index');
                                // 获取最新选中
                                var lastChecked = authtree.getLastChecked('#LAY-auth-tree-convert-index');
                                // 获取最新取消
                                var lastNotChecked = authtree.getLastNotChecked('#LAY-auth-tree-convert-index');
                                console.log(
                                    'all', all, "\n",
                                    'checked', checked, "\n",
                                    'notchecked', notchecked, "\n",
                                    'leaf', leaf, "\n",
                                    'lastChecked', lastChecked, "\n",
                                    'lastNotChecked', lastNotChecked, "\n"
                                );
                            });
                            authtree.on('deptChange(lay-check-convert-auth)', function (data) {
                                console.log('监听到显示层数改变', data);
                            });
                            authtree.on('dblclick(lay-check-convert-auth)', function (data) {
                                console.log('监听到双击事件', data);
                            });
                        },
                        error: function (xml, errstr, err) {
                            layer.alert(errstr + '，获取样例数据失败，请检查是否部署在本地服务器中！');
                        }
                    });
                });

            });
            $(document).ready(function () {
                layui.use(['element', 'jquery', 'form'], function () {
                    var ele = layui.element, $ = layui.jquery, form = layui.form;
                    $.ajax({
                        type: 'get'
                        , url: 'GetPositions'
                        , success: function (data) {
                            console.log(data);
                            if (data != null) {
                                //$("#select_position").append("<select name=\"interest\" lay-filter=\"positions\">");
                                $.each(JSON.parse(data), function (key, value) {
                                    $("#select_position").append("<option value=" + value.pos_id + ">" + value.pos_name + "</option>");
                                    //ele.render();
                                });
                                //$("#select_position").append("</select>");
                                form.render();
                            }
                        }
                    });
                });
            });
        </script>
    </div>
</body>
</html>
